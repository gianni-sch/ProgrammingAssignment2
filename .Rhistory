1+1
install.packages("swirl")
install.packages("testthat")
demo()
demo('graphics')
demo('plotmath')
demo('image')
clear()
clear
clc
View(draw.plotmath.cell)
View(draw.plotmath.cell)
quit()
demo()
demo("hclcolors")
demo("hclColors")
demo("plotmath")
demo("image")
demo("persp")
demo("recursion")
clear()
clearPushBack()
close.screen()
find.package("devtools")
installed.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
close.screen()
sweep()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors<-flags[,11:17]
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$landmass,flags$animate,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(pants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
tables(plants$Active_Growth_Period)
table(plants$Active_Growth_Period)
str(plants)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris,iris$Sepal.Length,mean)
sapply(iris,iris$Sepal.Length,mean)
tapply(iris,iris$Sepal.Length,mean)
iris$Sepal.Length
sapply(iris$Sepal.Length,mean)
tapply(iris$Sepal.Length,mean)
lapply(iris$Sepal.Length,mean)
tapply(iris,iris$Sepal.Length[,1],mean)
iris$Sepal.Length[,1]
iris$Sepal.Length[,]
iris$Sepal.Length
mean(irs$Sepal.Length)
mean(iris$Sepal.Length)
head(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
Head(mtcars)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl=4, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
diff <- tapply(mtcars$hp,mt)
hp<-tapply(mtcars$hp, mtcars$cyl, mean)
hp
hp[1]
abs(hp[1]-hp[3])
debug(ls)
ls()
head(iris)
iris$Sepal.Length
iris$Sepal.Length[iris]
quit()
?debug
undebug(ls)
c
undebug(ls)
iris$Sepal.Length
iris$Sepal.Length[iris$Species=='virginica']
mean(iris$Sepal.Length[iris$Species=='virginica'])
tapply(mtcars$hp, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-c(1,2,3,4,5)
b<-makeVector(a)
b
b$set(a)
c<-b$set(a)
c
b
c<-b$set(a)
b
c<-b$set(a)
c
a
c<-b$set(a)
b
x
a
c<-b$set(1:6)
a
c
b
b$set(1:6)
a
b<-makeVector(a)
b
b$set(1:6)
b$set()
get<- function() x
get
setmean<-function(mean) m<<-mean
setmean
c<- cachemean(a)
a
b
c<- cachemean(b)
c
c<- cachemean(b)
c
c<- cachemean(b)
c
a
b
a<-1:9
c
c<- cachemean(b)
c
b
c
a
b<-
a
b
c<- cachemean(b)
c
b<- makeVector(a)
b
c
c<- cachemean(b)
c
c<- cachemean(b)
c
b
b$get()
b$getmean()
mean(1:9)
b$se
a<-2:10
b$set(a)
b$set()
b$getmean()
b$get()
cachemean(b)
mean(2:10)
setwd("/home/gianfranco/workspace/R - course/ProgrammingAssignment2")
a = matrix(c(1,2,1,2,3,3,3,6,2),3,3)
a
solve(a)
load("cachematrix.R")
load("cachematrix.R")
source('/home/gianfranco/workspace/R - course/ProgrammingAssignment2/cachematrix.R')
load("cachematrix.R")
load("cachematrix.R")
source("cachematrix.R")
a
b<- makeCacheMatrix(a)
b
c<- cacheSolve(b)
c
c<- cacheSolve(b)
c
a<-NULL
b<- makeCacheMatrix(a)
b
c<- cacheSolve(b)
a = matrix(c(1,2,1,2,3,3,3,6,2),3,3)
b<- makeCacheMatrix(a)
c<- cacheSolve(b)
c
c<- cacheSolve(b)
dim(a)
dim(a)[1]
source('/home/gianfranco/workspace/R - course/ProgrammingAssignment2/cachematrix.R')
a = matrix(c(1,2,1,2,3,3,3,6,2),3,2)
a = matrix(c(1,2,1,2,3,3,3,6,2),2,4)
a = matrix(c(1,2,1,2,3,3,3,6),2,4)
source('/home/gianfranco/workspace/R - course/ProgrammingAssignment2/cachematrix.R')
dim(a)[1]
dim(a)[2]
a
b<- makeCacheMatrix(a)
len(a)
lenght(a)
length(a)
a = matrix(c(1,2),1,1)
a
solve(a)
a = matrix(c(1,-2),1,1)
a
a = matrix(c(-1,-2),1,1)
a
solve(a)
a = matrix(c(-0.5,-2),1,1)
solve(a)
a = matrix(NULL,1,1)
a = matrix(1,1)
a
a = matrix()
a
solve(a)
b<- makeCacheMatrix(a)
b
c<- cacheSolve(b)
c
a = matrix(c(1,NA),2,2)
a
b<- makeCacheMatrix(a)
c<- cacheSolve(b)
c
if(a==NA)
message("OK")
if(a==NA) message("OK")
a
if(a==NA) message("OK")
sum(a)
a = matrix(c(1,NA,2,3),2,2)
a
sum(a)
a
a = matrix(c(1,2,2,NA),2,2)
sum(a)
a = matrix(c(1,2,2,3),2,2)
a
sum(a)
source('/home/gianfranco/workspace/R - course/ProgrammingAssignment2/cachematrix.R')
source('/home/gianfranco/workspace/R - course/ProgrammingAssignment2/cachematrix.R')
b<- makeCacheMatrix(a)
a = matrix(c(1,2,2,NA),2,2)
b<- makeCacheMatrix(a)
source('/home/gianfranco/workspace/R - course/ProgrammingAssignment2/cachematrix.R')
